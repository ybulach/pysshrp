#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is part of pysshrp.
#
# pysshrp is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pysshrp is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pysshrp.  If not, see <http://www.gnu.org/licenses/>.

import sys
reload(sys)
sys.setdefaultencoding('utf-8')

import argparse, logging, logging.handlers, pysshrp, signal, threading, time

# Handle signals
def stop_pysshrpd(signum, frame):
	pysshrp.common.logger.info('Shutting down pysshrpd')
	pysshrp.common.running = False

def reload_pysshrpd(signum, frame):
	try:
		pysshrp.common.config.reload()
	except pysshrp.PysshrpException as e:
		pysshrp.common.logger.critical('Can\'t reload configuration: %s' % e)

# Start pysshrpd
if __name__ == '__main__':
	try:
		# Parse arguments
		argparser = argparse.ArgumentParser(description='A Python SSH/SFTP reverse proxy')
		argparser.add_argument('-c', '--config', help='path to a pysshrp configuration file', required=True)
		argparser.add_argument('-l', '--log', help='log to this specified file', required=False)
		args = argparser.parse_args()

		# Define logging configuration
		log_level=logging.INFO
		log_format='%(name)s %(levelname)s - %(message)s'

		if args.log:
			# Started with init.d
			log_handler = logging.handlers.WatchedFileHandler(args.log)
			log_handler.setFormatter(logging.Formatter('%(asctime)-15s ' + log_format))

			root_logger = logging.getLogger()
			root_logger.addHandler(log_handler)
			root_logger.setLevel(log_level)
		else:
			# Started with systemd
			logging.basicConfig(
				level=log_level,
				format=log_format
			)

		pysshrp.common.logger.info('*************************************************')

		# Parse configuration file
		pysshrp.common.config = pysshrp.ConfigurationParser(args.config)

		# Launch server
		pysshrp.ServerThread.allow_reuse_address = True
		listen = (pysshrp.common.config.listenAddress, pysshrp.common.config.listenPort)
		server = pysshrp.ServerThread(listen, pysshrp.RequestHandler)
		thread = threading.Thread(target=server.serve_forever)
		thread.daemon = False
		server.daemon_threads = True

		signal.signal(signal.SIGTERM, stop_pysshrpd)
		signal.signal(signal.SIGINT, stop_pysshrpd)
		signal.signal(signal.SIGHUP, reload_pysshrpd)

		pysshrp.common.running = True
		pysshrp.common.logger.info('Starting pysshrpd server thread on %s:%d' % listen)
		thread.start()

		while pysshrp.common.running:
			time.sleep(1)

		server.shutdown()
		server.server_close()

		thread.join()
		pysshrp.common.logger.info('Server thread of pysshrpd terminated')

	# Catched critical exception
	except pysshrp.PysshrpException as e:
		pysshrp.common.logger.critical('%s' % e)
		exit(1)
	except Exception:
		logging.critical('Unhandled Python exception', exc_info=True)
		exit(1)
